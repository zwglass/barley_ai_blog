import os
from pathlib import Path

"""
创建项目文件夹内 __init__.py 文件, 引用不需要再写文件名
"""

def update_init_file(directory):
    """
    扫描指定目录中的所有.py文件，并将每个文件中的类名写入__init__.py文件。
    
    :param directory: 需要扫描的目录路径
    """
    # 检查目录是否存在
    if not os.path.exists(directory):
        raise ValueError(f"目录 {directory} 不存在")
    
    # 创建或清空__init__.py文件
    init_file_path = os.path.join(directory, '__init__.py')
    with open(init_file_path, 'w') as init_file:
        init_file.write("# Auto-generated by script\n\n")

    # 遍历目录中的所有文件
    for filename in os.listdir(directory):
        if filename.endswith('.py') and filename != '__init__.py':
            file_path = os.path.join(directory, filename)
            with open(file_path, 'r', encoding='utf-8') as file:
                content = file.read()
                
                # 查找所有的类定义
                class_names = [line.split('class')[1].split('(')[0].strip() for line in content.split('\n') if 'class ' in line and '(' in line]
                
                if class_names:
                    # 写入到__init__.py文件
                    with open(init_file_path, 'a', encoding='utf-8') as init_file:
                        for class_name in class_names:
                            init_file.write(f'from .{os.path.splitext(filename)[0]} import {class_name}\n')
    
    print(f"已更新 {init_file_path}")

# 使用示例
# update_init_file('/path/to/your/folder')

if __name__ == '__main__':
    # run: python tools/init_func/generate_dir_init_file.py
    dir_list = [
        'zwutils_methods',
        'handle_cls',
    ]
    tools_path = Path(__file__).resolve().parent.parent
    for p in dir_list:
        dir_path = tools_path / p
        update_init_file(str(dir_path))
